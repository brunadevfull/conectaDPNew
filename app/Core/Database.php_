<?php
// app/Core/Database.php
namespace App\Core;

class Database
{
    private static $instance = null;
    private $connection;

       
    // app/Core/Database.php - Método __construct()
    private function __construct()
    {
        $this->loadEnv();
        
        // Debug para verificar valores
        error_log("DB_HOST: " . getenv('DB_HOST'));
        error_log("DB_PORT: " . getenv('DB_PORT'));
        error_log("DB_DATABASE: " . getenv('DB_DATABASE'));
        error_log("DB_USERNAME: " . getenv('DB_USERNAME'));
        
        try {
            $dsn = sprintf(
                'pgsql:host=%s;port=%s;dbname=%s',
                getenv('DB_HOST'),
                getenv('DB_PORT'),
                getenv('DB_DATABASE')
            );
            $username = getenv('DB_USERNAME');
            $password = getenv('DB_PASSWORD');

            $this->connection = new \PDO($dsn, $username, $password);
            $this->connection->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
        } catch (\PDOException $e) {
            error_log("Erro de conexão com o banco: " . $e->getMessage());
            throw new \Exception("Database connection error: " . $e->getMessage());
        }
    }

        // app/Core/Database.php - Método loadEnv()
    private function loadEnv()
    {
        $filePath = __DIR__ . '/../../.env';
        if (!file_exists($filePath)) {
            throw new \Exception(".env file not found at: $filePath");
        }

        $lines = file($filePath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        foreach ($lines as $line) {
            if (strpos(trim($line), '#') === 0) continue;
            list($key, $value) = explode('=', $line, 2);
            $key = trim($key);
            $value = trim($value);
            
            // Adicione isso para debug
            error_log("Carregando variável de ambiente: $key = " . ($key == 'DB_PASSWORD' ? '******' : $value));
            
            putenv("$key=$value");
            $_ENV[$key] = $value;
            $_SERVER[$key] = $value;
        }
}

    public static function getInstance()
    {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    public function getConnection()
    {
        return $this->connection;
    }

    // Prevent cloning of the instance
    private function __clone() {}

    // Prevent unserializing of the instance
    public function __wakeup() {}
}